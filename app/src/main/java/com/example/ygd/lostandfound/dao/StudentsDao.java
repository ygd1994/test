package com.example.ygd.lostandfound.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "students".
*/
public class StudentsDao extends AbstractDao<Students, String> {

    public static final String TABLENAME = "students";

    /**
     * Properties of entity Students.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property SName = new Property(1, String.class, "sName", false, "S_NAME");
        public final static Property SPwd = new Property(2, String.class, "sPwd", false, "S_PWD");
        public final static Property STel = new Property(3, String.class, "sTel", false, "S_TEL");
        public final static Property SQQ = new Property(4, String.class, "sQQ", false, "S_QQ");
    };


    public StudentsDao(DaoConfig config) {
        super(config);
    }
    
    public StudentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"students\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"S_NAME\" TEXT," + // 1: sName
                "\"S_PWD\" TEXT," + // 2: sPwd
                "\"S_TEL\" TEXT," + // 3: sTel
                "\"S_QQ\" TEXT);"); // 4: sQQ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"students\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Students entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String sName = entity.getSName();
        if (sName != null) {
            stmt.bindString(2, sName);
        }
 
        String sPwd = entity.getSPwd();
        if (sPwd != null) {
            stmt.bindString(3, sPwd);
        }
 
        String sTel = entity.getSTel();
        if (sTel != null) {
            stmt.bindString(4, sTel);
        }
 
        String sQQ = entity.getSQQ();
        if (sQQ != null) {
            stmt.bindString(5, sQQ);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Students readEntity(Cursor cursor, int offset) {
        Students entity = new Students( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sPwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sTel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sQQ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Students entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSQQ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Students entity, long rowId) {
        return entity.get_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Students entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
