package com.example.ygd.lostandfound.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "news".
*/
public class NewsDao extends AbstractDao<News, Long> {

    public static final String TABLENAME = "news";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NTitle = new Property(1, String.class, "nTitle", false, "N_TITLE");
        public final static Property NDate = new Property(2, String.class, "nDate", false, "N_DATE");
        public final static Property NImg = new Property(3, String.class, "nImg", false, "N_IMG");
        public final static Property NContent = new Property(4, String.class, "nContent", false, "N_CONTENT");
        public final static Property NAgree = new Property(5, Integer.class, "nAgree", false, "N_AGREE");
        public final static Property NUrl = new Property(6, String.class, "nUrl", false, "N_URL");
    };


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"news\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"N_TITLE\" TEXT," + // 1: nTitle
                "\"N_DATE\" TEXT," + // 2: nDate
                "\"N_IMG\" TEXT," + // 3: nImg
                "\"N_CONTENT\" TEXT," + // 4: nContent
                "\"N_AGREE\" INTEGER," + // 5: nAgree
                "\"N_URL\" TEXT);"); // 6: nUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"news\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nTitle = entity.getNTitle();
        if (nTitle != null) {
            stmt.bindString(2, nTitle);
        }
 
        String nDate = entity.getNDate();
        if (nDate != null) {
            stmt.bindString(3, nDate);
        }
 
        String nImg = entity.getNImg();
        if (nImg != null) {
            stmt.bindString(4, nImg);
        }
 
        String nContent = entity.getNContent();
        if (nContent != null) {
            stmt.bindString(5, nContent);
        }
 
        Integer nAgree = entity.getNAgree();
        if (nAgree != null) {
            stmt.bindLong(6, nAgree);
        }
 
        String nUrl = entity.getNUrl();
        if (nUrl != null) {
            stmt.bindString(7, nUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nContent
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // nAgree
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // nUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNAgree(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(News entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(News entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
