package com.example.ygd.lostandfound.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "gives".
*/
public class GivesDao extends AbstractDao<Gives, Long> {

    public static final String TABLENAME = "gives";

    /**
     * Properties of entity Gives.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property S_id = new Property(1, String.class, "s_id", false, "S_ID");
        public final static Property GName = new Property(2, String.class, "gName", false, "G_NAME");
        public final static Property GLocation = new Property(3, String.class, "gLocation", false, "G_LOCATION");
        public final static Property GDate = new Property(4, String.class, "gDate", false, "G_DATE");
        public final static Property GDescription = new Property(5, String.class, "gDescription", false, "G_DESCRIPTION");
        public final static Property GImgUrl = new Property(6, String.class, "gImgUrl", false, "G_IMG_URL");
        public final static Property GLatitude = new Property(7, Double.class, "gLatitude", false, "G_LATITUDE");
        public final static Property GLongitude = new Property(8, Double.class, "gLongitude", false, "G_LONGITUDE");
    };


    public GivesDao(DaoConfig config) {
        super(config);
    }
    
    public GivesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"gives\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"S_ID\" TEXT," + // 1: s_id
                "\"G_NAME\" TEXT," + // 2: gName
                "\"G_LOCATION\" TEXT," + // 3: gLocation
                "\"G_DATE\" TEXT," + // 4: gDate
                "\"G_DESCRIPTION\" TEXT," + // 5: gDescription
                "\"G_IMG_URL\" TEXT," + // 6: gImgUrl
                "\"G_LATITUDE\" REAL," + // 7: gLatitude
                "\"G_LONGITUDE\" REAL);"); // 8: gLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"gives\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gives entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(2, s_id);
        }
 
        String gName = entity.getGName();
        if (gName != null) {
            stmt.bindString(3, gName);
        }
 
        String gLocation = entity.getGLocation();
        if (gLocation != null) {
            stmt.bindString(4, gLocation);
        }
 
        String gDate = entity.getGDate();
        if (gDate != null) {
            stmt.bindString(5, gDate);
        }
 
        String gDescription = entity.getGDescription();
        if (gDescription != null) {
            stmt.bindString(6, gDescription);
        }
 
        String gImgUrl = entity.getGImgUrl();
        if (gImgUrl != null) {
            stmt.bindString(7, gImgUrl);
        }
 
        Double gLatitude = entity.getGLatitude();
        if (gLatitude != null) {
            stmt.bindDouble(8, gLatitude);
        }
 
        Double gLongitude = entity.getGLongitude();
        if (gLongitude != null) {
            stmt.bindDouble(9, gLongitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gives readEntity(Cursor cursor, int offset) {
        Gives entity = new Gives( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // s_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gLocation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gDescription
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gImgUrl
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // gLatitude
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // gLongitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gives entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setS_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGImgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGLatitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setGLongitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gives entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gives entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
