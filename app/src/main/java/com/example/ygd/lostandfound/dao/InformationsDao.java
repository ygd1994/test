package com.example.ygd.lostandfound.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "informations".
*/
public class InformationsDao extends AbstractDao<Informations, Long> {

    public static final String TABLENAME = "informations";

    /**
     * Properties of entity Informations.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IIsLost = new Property(1, Boolean.class, "iIsLost", false, "I_IS_LOST");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property S_id = new Property(3, String.class, "s_id", false, "S_ID");
        public final static Property INum = new Property(4, String.class, "iNum", false, "I_NUM");
    };


    public InformationsDao(DaoConfig config) {
        super(config);
    }
    
    public InformationsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"informations\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"I_IS_LOST\" INTEGER," + // 1: iIsLost
                "\"TYPE\" INTEGER," + // 2: type
                "\"S_ID\" TEXT," + // 3: s_id
                "\"I_NUM\" TEXT);"); // 4: iNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"informations\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Informations entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean iIsLost = entity.getIIsLost();
        if (iIsLost != null) {
            stmt.bindLong(2, iIsLost ? 1L: 0L);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(4, s_id);
        }
 
        String iNum = entity.getINum();
        if (iNum != null) {
            stmt.bindString(5, iNum);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Informations readEntity(Cursor cursor, int offset) {
        Informations entity = new Informations( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // iIsLost
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // s_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // iNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Informations entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIIsLost(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setS_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setINum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Informations entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Informations entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
